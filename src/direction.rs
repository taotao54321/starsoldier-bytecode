#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq, PartialOrd, Ord)]
pub struct Direction(u8);

impl Direction {
    pub fn new(idx: u8) -> Self {
        assert!((0..=0x3F).contains(&idx));
        Self(idx)
    }

    /// (x1,y1) から (x2,y2) への方向 (0..=15) を返す。
    pub fn aim((x1, y1): (u8, u8), (x2, y2): (u8, u8)) -> Self {
        const TABLE: [u8; 24] = [
            14, 2, 10, 6, 14, 2, 10, 6, 15, 1, 9, 7, 13, 3, 11, 5, 0, 0, 8, 8, 12, 4, 12, 4,
        ];

        fn abs_diff(a: u8, b: u8) -> u8 {
            if a >= b {
                a - b
            } else {
                b - a
            }
        }

        let mut idx = 0;

        if x1 < x2 {
            idx |= 1 << 0;
        }
        let dx = abs_diff(x1, x2);

        if y1 < y2 {
            idx |= 1 << 1;
        }
        let dy = abs_diff(y1, y2);

        if dy < dx {
            idx |= 1 << 2;
        }
        let a = abs_diff(dx, dy) / 4;
        let b = dx.min(dy) / 4;

        if 3 * a >= b {
            if a + a / 4 >= b {
                idx |= 1 << 4;
            } else {
                idx |= 1 << 3;
            }
        }

        Self::new(TABLE[idx])
    }

    pub fn index(self) -> u8 {
        self.0
    }

    pub fn displacement_object(self) -> (i8, i8) {
        const TABLE: [(i8, i8); 0x40] = [
            // {{{
            (0, -2),
            (1, -2),
            (1, -1),
            (2, -1),
            (2, 0),
            (2, 1),
            (1, 1),
            (1, 2),
            (0, 2),
            (-1, 2),
            (-1, 1),
            (-2, 1),
            (-2, 0),
            (-2, -1),
            (-1, -1),
            (-1, -2),
            (0, -4),
            (2, -4),
            (3, -3),
            (4, -2),
            (4, 0),
            (4, 2),
            (3, 3),
            (2, 4),
            (0, 4),
            (-2, 4),
            (-3, 3),
            (-4, 2),
            (-4, 0),
            (-4, -2),
            (-3, -3),
            (-2, -4),
            (0, -6),
            (2, -6),
            (4, -4),
            (6, -2),
            (6, 0),
            (6, 2),
            (4, 4),
            (2, 6),
            (0, 6),
            (-2, 6),
            (-4, 4),
            (-6, 2),
            (-6, 0),
            (-6, -2),
            (-4, -4),
            (-2, -6),
            (0, -8),
            (3, -7),
            (6, -6),
            (7, -3),
            (8, 0),
            (7, 3),
            (6, 6),
            (3, 7),
            (0, 8),
            (-3, 7),
            (-6, 6),
            (-7, 3),
            (-8, 0),
            (-7, -3),
            (-6, -6),
            (-3, -7),
            // }}}
        ];

        TABLE[usize::from(self.0)]
    }

    pub fn displacement_bullet(self) -> (i8, i8) {
        const TABLE: [(i8, i8); 0x40] = [
            // {{{
            (0, -2),
            (1, -2),
            (1, -1),
            (2, -1),
            (2, 0),
            (2, 1),
            (1, 1),
            (1, 2),
            (0, 2),
            (-1, 2),
            (-1, 1),
            (-2, 1),
            (-2, 0),
            (-2, -1),
            (-1, -1),
            (-1, -2),
            (0, -3),
            (1, -3),
            (2, -2),
            (3, -1),
            (3, 0),
            (3, 1),
            (2, 2),
            (1, 3),
            (0, 3),
            (-1, 3),
            (-2, 2),
            (-3, 1),
            (-3, 0),
            (-3, -1),
            (-2, -2),
            (-1, -3),
            (0, -4),
            (2, -4),
            (3, -3),
            (4, -2),
            (4, 0),
            (4, 2),
            (3, 3),
            (2, 4),
            (0, 4),
            (-2, 4),
            (-3, 3),
            (-4, 2),
            (-4, 0),
            (-4, -2),
            (-3, -3),
            (-2, -4),
            (0, -5),
            (2, -4),
            (3, -3),
            (4, -2),
            (5, 0),
            (4, 2),
            (3, 3),
            (2, 4),
            (0, 5),
            (-2, 4),
            (-3, 3),
            (-4, 2),
            (-5, 0),
            (-4, -2),
            (-3, -3),
            (-2, -4),
            // }}}
        ];

        TABLE[usize::from(self.0)]
    }
}
